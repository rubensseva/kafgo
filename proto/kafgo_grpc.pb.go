// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: kafgo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafgoClient is the client API for Kafgo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafgoClient interface {
	Publish(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Kafgo_SubscribeClient, error)
}

type kafgoClient struct {
	cc grpc.ClientConnInterface
}

func NewKafgoClient(cc grpc.ClientConnInterface) KafgoClient {
	return &kafgoClient{cc}
}

func (c *kafgoClient) Publish(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/Kafgo/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafgoClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Kafgo_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kafgo_ServiceDesc.Streams[0], "/Kafgo/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &kafgoSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kafgo_SubscribeClient interface {
	Recv() (*Msg, error)
	grpc.ClientStream
}

type kafgoSubscribeClient struct {
	grpc.ClientStream
}

func (x *kafgoSubscribeClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KafgoServer is the server API for Kafgo service.
// All implementations must embed UnimplementedKafgoServer
// for forward compatibility
type KafgoServer interface {
	Publish(context.Context, *Msg) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, Kafgo_SubscribeServer) error
	mustEmbedUnimplementedKafgoServer()
}

// UnimplementedKafgoServer must be embedded to have forward compatible implementations.
type UnimplementedKafgoServer struct {
}

func (UnimplementedKafgoServer) Publish(context.Context, *Msg) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedKafgoServer) Subscribe(*SubscribeRequest, Kafgo_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedKafgoServer) mustEmbedUnimplementedKafgoServer() {}

// UnsafeKafgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafgoServer will
// result in compilation errors.
type UnsafeKafgoServer interface {
	mustEmbedUnimplementedKafgoServer()
}

func RegisterKafgoServer(s grpc.ServiceRegistrar, srv KafgoServer) {
	s.RegisterService(&Kafgo_ServiceDesc, srv)
}

func _Kafgo_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafgoServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kafgo/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafgoServer).Publish(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafgo_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafgoServer).Subscribe(m, &kafgoSubscribeServer{stream})
}

type Kafgo_SubscribeServer interface {
	Send(*Msg) error
	grpc.ServerStream
}

type kafgoSubscribeServer struct {
	grpc.ServerStream
}

func (x *kafgoSubscribeServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

// Kafgo_ServiceDesc is the grpc.ServiceDesc for Kafgo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kafgo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Kafgo",
	HandlerType: (*KafgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Kafgo_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Kafgo_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kafgo.proto",
}
